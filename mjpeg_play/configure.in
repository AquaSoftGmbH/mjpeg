dnl Process this file with autoconf to produce a configure script.
AC_INIT(lavtools/lav_io.c)

MJPEG_MAJOR_VERSION=1
MJPEG_MINOR_VERSION=6
MJPEG_MICRO_VERSION=0
MJPEG_VERSION=$MJPEG_MAJOR_VERSION.$MJPEG_MINOR_VERSION.$MJPEG_MICRO_VERSION-beta2

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(mjpegtools, $MJPEG_VERSION)
AM_MAINTAINER_MODE
AM_OUTPUT_DEPENDENCY_COMMANDS
AC_CANONICAL_HOST

# libtool versioning
LT_RELEASE=$MJPEG_MAJOR_VERSION.$MJPEG_MINOR_VERSION
LT_CURRENT=$MJPEG_MICRO_VERSION
LT_REVISION=$MJPEG_MICRO_VERSION
LT_AGE=$MJPEG_MICRO_VERSION
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl **********************************************************************
dnl Options

AC_ARG_ENABLE(compile-warnings,     
  [  --enable-compile-warnings,        Turn on compiler warnings.])
AC_ARG_ENABLE(warnings_as_errors,   
  [  --enable-warnings_as_errors,      Compiler warnings are errors.])
AC_ARG_ENABLE(xfree-ext, 
  [  --enable-xfree-ext,               use XFree extensions (DGA)])
AC_ARG_ENABLE(cmov-extension, 
  [  --enable-cmov-extension,          use the cmov instruction.])
AC_ARG_ENABLE(simd-accel,
  [  --enable-simd-accel,              use SIMD multimedia instructions (MMX,AltiVec etc) if possible])
AC_ARG_WITH(jpeg-mmx,
  [  --with-jpeg-mmx,                  use the mmx accelerated jpeg lib])
AC_ARG_WITH(quicktime,
  [  --with-quicktime,                 quicktime support for record/playback])
AC_ARG_WITH(dv,
  [  --with-dv,                        libDV (digital video) support])
AC_ARG_WITH(dv-yv12,
  [  --with-dv-yv12,                   libDV PAL YV12 read-support])
AC_ARG_ENABLE(large-file,
  [  --disable-large-file,             disable large file support (>2GB)])
AC_ARG_WITH(aviplay,
  [  --with-aviplay                    use aviplay libraries])

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
#AC_PROG_RANLIB
AC_C_BIGENDIAN
AC_C_CONST
AC_C_INLINE

dnl Initialize libtool
AM_PROG_LIBTOOL

AC_CHECK_HEADERS(fenv.h stdint.h inttypes.h sys/types.h stdbool.h getopt.h alloca.h sys/soundcard.h)

AC_CHECK_FUNC(getopt_long,[AC_DEFINE(HAVE_GETOPT_LONG,1,long getopt support)],
[ # FreeBSD and BSD/OS have a gnugetopt library for this:
  AC_CHECK_LIB([gnugetopt],[getopt_long],
  [AC_DEFINE(HAVE_GETOPT_LONG,1,getopt support) LIBGETOPT_LIB="-lgnugetopt"])])
AC_SUBST(LIBGETOPT_LIB)

AC_TYPE_SIGNAL

OS_ARCH=`uname -s | sed -e 's|/|_|g'`
OS_RELEASE=`uname -r`
OS_CPU=`uname -m`

dnl Set up the usual compiler infos...
have_large_file=false
if test ! x$enable_large_file = xno
then
  if test x$OS_ARCH = xLinux ; then
    AC_MSG_CHECKING([whether glibc supports 64-bit file offsets])
    AC_TRY_COMPILE(
      [ 
#define _LARGEFILE_SOURCE
#define _LARGEFILE64_SOURCE
#define _FILE_OFFSET_BITS 64
#include <gnu/libc-version.h>
#include <stdio.h> ],
      [ 
if(sizeof(__off_t) == 8 && sizeof(fpos_t) == 8) return 0;
return 1;
],
      [ have_large_file=true 
        AC_MSG_RESULT([yes])],
      [ have_large_file=false
        AC_MSG_RESULT([no])])
            
  fi
dnl test for glibc 2.1.3 or later
dnl test for kernel 2.4.0 or later
  AC_DEFINE(_FILE_OFFSET_BITS,64)
  AC_DEFINE(_LARGEFILE_SOURCE)
  AC_DEFINE(_LARGEFILE64_SOURCE)
dnl  CFLAGS="$CFLAGS -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64"
else
  AC_DEFINE(_FILE_OFFSET_BITS,32)
fi

dnl test for alpha architecture, and Compaq Math Library (cpml) -- much faster
dnl than GNU libm on this arch.
LIBM_LIBS="-lm "
AC_SUBST(LIBM_LIBS)
AC_MSG_CHECKING([for alpha architecture])
if test x$OS_ARCH = xLinux && test x$OS_CPU = xalpha ; then
    AC_MSG_RESULT([yes])
    AC_CHECK_LIB(cpml, asin,
      [ LIBM_LIBS="-lcpml"
        have_cpml=true ],,)
else
    AC_MSG_RESULT([no])
fi

dnl system
AC_CYGWIN

dnl *********************************************************************
dnl madmac/gernot: This activates architecture specific changes (e g no MMX)
dnl
dnl It defines a tag called "IRIX" to circumvent all the Linux video device code (and its includes)
dnl and defines WORD_BIGENDIAN to flag a big iron system ;-) 

case "$HOSTTYPE" in
  mips*) 
   echo NEW: Activating IRIX architecture flags:IRIX and WORD_BIGENDIAN !
   CFLAGS="$CFLAGS -DIRIX -DWORD_BIGENDIAN";;
esac

dnl *********************************************************************
dnl Test whether we're linux or not. If so, define HAVE_V4L and build the
dnl video4linux/hardware dependent tools. Else, undefine HAVE_V4L

os_type=`uname`
have_video4linux=false
if test x$os_type = x"Linux"; then
  AC_CHECK_HEADER(linux/videodev.h,
    have_video4linux=true
    AC_DEFINE(HAVE_V4L),
    AC_MSG_ERROR([videodev.h not found - please install the linux kernel headers])
    )
else
  AC_MSG_WARN([Did not find linux platform - video4linux functionality will be disabled])
fi

dnl *********************************************************************
dnl Check for the various libraries we depend on.
dnl
dnl First lets see if glib is present on this machine

AM_PATH_GLIB(1.2.0)

dnl *********************************************************************
dnl Check for the pthread lib
dnl
AC_SUBST(PTHREAD_LIBS)
have_pthread=false
AC_CHECK_LIB(pthread, pthread_create,
  [ PTHREAD_LIBS="-lpthread" 
    AC_DEFINE(HAVE_LIBPTHREAD)
    have_pthread=true ],,)

AC_CHECK_FUNC(pthread_attr_getstacksize,
	          [
				AC_DEFINE(HAVE_PTHREADSTACKSIZE)
			  ] )


dnl *********************************************************************
dnl Check for the special mmx accelerated jpeg library
dnl At the end of this mess, JPEG_LIBS will contain the libraries and 
dnl flags needed to link with the jpeg library and JPEG_CFLAGS will 
dnl have the needed flags to compile against said library
AC_SUBST(JPEG_LIBS)
AC_SUBST(JPEG_CFLAGS)
have_jpeg=false
if test x$with_jpeg_mmx = xyes ; then
  AC_MSG_ERROR([
*** A directory must be specified for --with-jpeg-mmx option.])
fi
if test x$with_jpeg_mmx = x ; then
  dnl Special case for building .deb's
  if test -d ../jpeg-mmx ; then
    with_jpeg_mmx=`pwd`/../jpeg-mmx
  else
    with_jpeg_mmx=/usr/local/src/jpeg-mmx
  fi
fi

dnl
dnl Look for the installed/specified copy
dnl

OLD_CFLAGS="$CFLAGS"
OLD_LIBS="$LIBS"
LIBS="$LIBS -L$with_jpeg_mmx"
CFLAGS="$CFLAGS -I$with_jpeg_mmx"
AC_CHECK_LIB(jpeg-mmx, jpeg_start_compress,
   [ JPEG_LIBS="$LIBS -ljpeg-mmx"
     JPEG_CFLAGS="-I$with_jpeg_mmx"
       have_jpeg=true ],,)
  LIBS="$OLD_LIBS"
  CFLAGS="$OLD_CFLAGS"

dnl 
dnl Look for _a_ jpeg lib that will work.
dnl
if test x$have_jpeg = xfalse ; then
  AC_CHECK_LIB(jpeg, jpeg_start_compress,
    [ JPEG_LIBS="-ljpeg"
      JPEG_CFLAGS=""
      have_jpeg=true ],,)
fi
dnl *********************************************************************
dnl Check for the libmovtar library
AC_SUBST(MOVTAR_CFLAGS)
AC_SUBST(MOVTAR_LIBS)
have_movtar=false
ifdef([AM_PATH_MOVTAR],
      [ AM_PATH_MOVTAR(0.0.2, [ AC_DEFINE(HAVE_LIBMOVTAR) have_movtar=true],,) ])

dnl *********************************************************************
dnl Check for the quicktime for linux library
dnl At the end of this mess, QUICKTIME_LIBS will contain the libraries and
dnl flags needed to link with the quicktime library and QUICKTIME_CFLAGS
dnl will have the needed flags to compile against said library
AC_SUBST(QUICKTIME_LIBS)
AC_SUBST(QUICKTIME_CFLAGS)
if test x$with_quicktime = xyes ; then
  AC_MSG_ERROR([
*** A directory must be specified for the --with-quicktime option.])

elif test x$with_quicktime = x ; then
  if test -d /usr/src/quicktime4linux-1.4  ; then
    with_quicktime=/usr/src/quicktime4linux-1.4
  elif test -d /usr/src/quicktime4linux-1.3  ; then
    with_quicktime=/usr/src/quicktime4linux-1.3
  elif test -d /usr/local/src/quicktime4linux-1.4  ; then
    with_quicktime=/usr/local/src/quicktime4linux-1.4
  elif test -d /usr/local/src/quicktime4linux-1.3  ; then
    with_quicktime=/usr/local/src/quicktime4linux-1.3
  elif test -d /usr/src/quicktime  ; then
    with_quicktime=/usr/src/quicktime	
  elif test -d /usr/local/src/quicktime  ; then
    with_quicktime=/usr/local/src/quicktime	
  elif test -d /usr/src/openquicktime-1.0-src ; then
    with_quicktime=/usr/src/openquicktime-1.0-src
  elif test -d /usr/local/src/openquicktime-1.0-src ; then
    with_quicktime=/usr/local/src/openquicktime-1.0-src
dnl This case doesn't work because Quicktime doesn't install qtprivate.h and
dnl codecs.h by default.  We need the actual source tree.  If you copy the
dnl appropriate headers to /usr/include/quicktime, uncomment the following case:
dnl	else if test -d /usr/include/quicktime	; then
dnl	  with_quicktime=/usr/include/quicktime
  fi	
fi

have_quicktime=false
have_openquicktime=false
if test x$with_quicktime != x ; then
  OLD_LIBS="$LIBS"
  LIBS="$LIBS -lz $LIBM_LIBS"
  AC_CHECK_LIB(png, png_read_info, [QUICKTIME_LIBS="-lpng -lz $LIBM_LIBS" PNG=true])
  LIBS="$OLD_LIBS"
  if test x$PNG = xtrue ; then
    if test x$have_pthread = xtrue ; then
      EXTRA_LIBS=" $GLIB_LIBS $PTHREAD_LIBS -lpng -lz $LIBM_LIBS"
    else
      EXTRA_LIBS=" -L$with_quicktime -L$with_quicktime/$(uname --machine) $LIBM_LIBS $GLIB_LIBS -lpng"
    fi
dnl Do we have OpenQuicktime instead of Quicktime4Linux?
    if test -f "$with_quicktime/openquicktime.h" ; then
        AC_CHECK_LIB(openquicktime, quicktime_open,
          [ QUICKTIME_LIBS="-L$with_quicktime -lopenquicktime $EXTRA_LIBS"
            QUICKTIME_CFLAGS="-I $with_quicktime"
            AC_DEFINE(HAVE_LIBQUICKTIME)
            have_openquicktime=true],, 
            -L$with_quicktime $EXTRA_LIBS  $JPEG_LIBS )
        EXTRA_LIBS=""
    else
      AC_CHECK_LIB(quicktime, quicktime_open,
        [ QUICKTIME_LIBS="-L$with_quicktime -L$with_quicktime/$(uname -m) -lquicktime $EXTRA_LIBS"
          QUICKTIME_CFLAGS="-I $with_quicktime"
          AC_DEFINE(HAVE_LIBQUICKTIME)
          have_quicktime=true],, 
          -L$with_quicktime -L$with_quicktime/$(uname -m) $EXTRA_LIBS  $JPEG_LIBS )
      EXTRA_LIBS=""
    fi
  fi
else
  AC_MSG_WARN([**** Quicktime record/playback disabled.])
fi

if test x$have_quicktime = xtrue ; then
  HAVE_QUICKTIME=1
else
  HAVE_QUICKTIME=0
fi
if test x$have_openquicktime = xtrue ; then
  HAVE_OPENQUICKTIME=1
  HAVE_QUICKTIME=1
  have_quicktime=true
else
  HAVE_OPENQUICKTIME=0
fi
AC_SUBST(HAVE_QUICKTIME)
AC_SUBST(HAVE_OPENQUICKTIME)
QUICKTIME_DIR=$with_quicktime
AC_SUBST(QUICKTIME_DIR)

dnl *********************************************************************
dnl Check for the aviplay for linux library
dnl At the end of this mess, AVIPLAY_LIBS will contain the libraries and
dnl flags needed to link with the aviplay library and AVIPLAY_CFLAGS
dnl will have the needed flags to compile against said library
AC_SUBST(AVIPLAY_LIBS)
AC_SUBST(AVIPLAY_CFLAGS)

have_aviplay=false
dnl check that there's an argument
if test x$with_aviplay = xyes ; then
  AC_MSG_ERROR([
  *** A directory must be specified for the --with-aviplay option.])
fi

dnl add some more libs which are probably needed
if test x$have_pthread = xtrue ; then
  EXTRA_LIBS="$LIBM_LIBS $GLIB_LIBS  $PTHREAD_LIBS  -ldl"
else
  EXTRA_LIBS="$LIBM_LIBS $GLIB_LIBS -ldl"
fi

dnl if the argument was not given, try finding it ourselves
if test x$with_aviplay = x ; then
  AC_PATH_PROG(AVIFILE_CONFIG, avifile-config)
  if test x$AVIFILE_CONFIG = x; then
    AC_MSG_WARN([avifile-config could not be found, divx support disabled])
  else
    AVIPLAY_CFLAGS=`$AVIFILE_CONFIG --cflags`
    AVIPLAY_LIBS=`$AVIFILE_CONFIG --libs`
    have_aviplay=true
  fi
else
  if test -d $with_aviplay ; then
    if test -d $with_aviplay/include ; then
      if test -d $with_aviplay/lib/.libs ; then
        AVIPLAY_CFLAGS="-I$with_aviplay/include"
        AVIPLAY_LIBS="-L$with_aviplay/lib/.libs -laviplay"
        have_aviplay=true
      fi
    fi
  fi
fi

if test x$have_aviplay = xtrue; then
  AC_DEFINE(HAVE_AVIFILE)
  dnl ** Check for GetDestFmt (new) or DestFmt (old)
  OLD_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $AVIPLAY_CFLAGS"
  AC_REQUIRE_CPP()
  AC_MSG_CHECKING([for IVideoDecoder::GetDestFmt() in avifile])
  AC_EGREP_HEADER([BITMAPINFOHEADER& GetDestFmt()],avifile.h,AC_MSG_RESULT([yes]),[
        AC_DEFINE(AVIFILE_USE_DESTFMT,1)
        AC_MSG_RESULT([no, using workaround])
        ])
  CPPFLAGS="$OLD_CPPFLAGS"
fi

dnl *********************************************************************
dnl Check for the libdv
dnl At the end of this mess, DV_LIBS will contain the libraries and 
dnl flags needed to link with the jpeg library and DV_CFLAGS will 
dnl have the needed flags to compile against said library
AC_SUBST(DV_LIBS)
AC_SUBST(DV_CFLAGS)
if test x$with_dv = xyes ; then
  AC_MSG_ERROR([
*** A directory must be specified for the --with-dv option.])
else if test x$with_dv = x ; then
  with_dv_l=/usr/local/lib
  with_dv_i=/usr/local/include/libdv
fi
fi
have_dv=false
if test x$have_pthread = xtrue ; then
  EXTRA_LIBS=" $LIBM_LIBS $GLIB_LIBS  $PTHREAD_LIBS -ldl "
else
  EXTRA_LIBS="-L$with_dv$with_dv_l $LIBM_LIBS $GLIB_LIBS -ldl "
fi
AC_CHECK_LIB(dv, dv_init,
  [ DV_LIBS="-L$with_dv$with_dv_l -ldv ${EXTRA_LIBS}"
    DV_CFLAGS="-I$with_dv$with_dv_i"
    AC_DEFINE(SUPPORT_READ_DV2)
    AC_DEFINE(SUPPORT_READ_YUV420)
    have_dv=true],, 
    -L$with_dv$with_dv_l  ${EXTRA_LIBS})

dnl *********************************************************************
dnl Check for libDV YV12 read-support
if test x$with_dv_yv12 = xyes; then
if test x$have_pthread = xtrue ; then
  EXTRA_LIBS=" $LIBM_LIBS $GLIB_LIBS  $PTHREAD_LIBS -ldl "
else
  EXTRA_LIBS="-L$with_dv$with_dv_l $LIBM_LIBS $GLIB_LIBS -ldl "
fi
AC_CHECK_LIB(dv, dv_init,
  [ DV_LIBS="-L$with_dv$with_dv_l -ldv ${EXTRA_LIBS}"
    DV_CFLAGS="-I$with_dv$with_dv_i"
    AC_DEFINE(LIBDV_PAL_YV12)],,
    -L$with_dv$with_dv_l  ${EXTRA_LIBS})
fi

dnl *********************************************************************
dnl  Lets find where xwindows lives on this machine. Punt if not found.
AC_PATH_XTRA

if test "-DX_DISPLAY_MISSING" = "$X_CFLAGS"; then
AC_MSG_ERROR(can not find X11)                                                
fi

AC_SUBST(X_CFLAGS)                                                             
AC_SUBST(X_PRE_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_LIBS)
AC_SUBST(x_libraries)

dnl ********************************************************************
dnl Check to see if __progname is provided by the system
dnl ********************************************************************
AC_MSG_CHECKING(for __progname)
AC_CACHE_VAL(ac_cv_extern__progname,
AC_TRY_LINK([],
	[extern char *__progname;
	puts(__progname)],
	ac_cv_extern___progname=yes,
	ac_cv_extern___progname=no))
if test x$ac_cv_extern___progname = xyes ; then
	AC_DEFINE(HAVE___PROGNAME,,[Is __progname defined by system?])
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi




dnl ********************************************************************
dnl Check for DGA (for v4l-conf)
dnl ********************************************************************
AC_SUBST(V4LCONF_LIBS)
AC_CHECK_LIB(Xxf86dga, XF86DGAQueryExtension,
	V4LCONF_LIBS="$X_LIBS -lXxf86dga" AC_DEFINE(HAVE_LIBXXF86DGA),,
	$X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS)
dnl ********************************************************************
dnl Check for Gtk+/glib (for glav)
dnl ********************************************************************
have_gtk=false
ifdef([AM_PATH_GTK],
      [ AM_PATH_GTK(1.2.0, [ have_gtk=true
                           AC_DEFINE(HAVE_GTK)],,) ])

dnl ********************************************************************
dnl Check for the SDL library (for software playback)
dnl
dnl AM_PATH_SDL defines SDL_CFLAGS and SDL_LIBS for us..
have_sdl=false
if test x$have_jpeg = xtrue ; then
ifdef([AM_PATH_SDL],
	[ AM_PATH_SDL(1.1.3, [ AC_DEFINE(BUILD_MJPEG)
                      have_sdl=true
                      AC_DEFINE(HAVE_SDL)],,) ])
fi

dnl ********************************************************************
dnl Test for MMX support, if we find an IA32 platform then check to see
dnl if gcc and its tools can generate MMX instructions, also make sure
dnl nasm is present for the files that need that. 
dnl Both are checked for for the maximum flexablity.
dnl
dnl TODO: host = non intel, target = intel <blah> do the checks also?
dnl       remeber we are checking that the toolchain can generate the
dnl       code, not whether the host can execute the code, thats done
dnl       at run time with the exception of the SSE code.
dnl
dnl 
have_asm_mmx=false
have_asm_sse=false
have_asm_nasm=false
have_x86cpu=false
AC_MSG_CHECKING([for Intel Pentium architecture (IA32)])
if test "$host_cpu" = "i386" -o "$host_cpu" = "i486" \
   -o "$host_cpu" = "i586" -o "$host_cpu" = "i686" \
   -o "$host_cpu" = "i786" ; then
  AC_MSG_RESULT(yes)
  have_x86cpu=true
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([for PowerPC architecture])
if test "$host_cpu" = "powerpc" ; then
  AC_MSG_RESULT(yes)
  have_ppccpu=true
else
  AC_MSG_RESULT(no)
fi

echo enable_simd_accel = X"$enable_simd_accel"X

if test "$enable_simd_accel" != "false" -a "$enable_simd_accel" != "no"
then
  if test x$have_x86cpu = xtrue
  then
   AC_DEFINE(HAVE_X86CPU)
   AC_MSG_CHECKING([for support for gcc-style register parameters on Intel])
   AC_TRY_COMPILE([],
    [extern void x(
     const unsigned char *src1,
     const unsigned char *src2,
     unsigned count,
     unsigned char *dst) __attribute((regparm(3)));],
   [AC_MSG_RESULT(yes)
    AC_MSG_CHECKING([for support of MMX in assembly code])
    cat > conftest.S <<EOF
       .text

       psubusb %mm3, %mm4
EOF
    if $CC -c conftest.S ; then
      AC_MSG_RESULT(yes)
      rm -f conftest.*
      AC_DEFINE(HAVE_ASM_MMX)
      have_asm_mmx=true
    else
      AC_MSG_RESULT(no)
      echo "configure: failed program was:" >&AC_FD_CC
      cat conftest.S >&AC_FD_CC
      rm -f conftest.*;
    fi
    AC_PATH_PROGS(AS, nasm nasmw)
    if test x$AS = x -o x$AS = x'"$AS"'; then
        echo "*************************************************************************"
        echo "** nasm not found!  X86 optimizations disabled!  (MMX/SSE instructions)**"
        echo "** INSTALL NASM OR PERFORMANCE WILL BE CRAP!                           **"
        echo "*************************************************************************"
        enable_3dnow_accel=no
        enable_cmov_extension=no
        enable_simd_accel=no
        have_asm_mmx=false
        have_asm_sse=false
        have_asm_nasm=false
    else
     AC_DEFINE(HAVE_ASM_NASM)
	 have_asm_nasm=true
     ASFLAGS="-f elf"
     if test x$CYGWIN = xyes; then
       ASFLAGS="-f coff"
     fi
     AC_SUBST(ASFLAGS)
    fi


   ],
   [AC_MSG_RESULT(no)
    AC_MSG_WARN(*** MMX Optimizations disabled....)]);
  fi
elif test x$have_ppccpu = xtrue
then
   AC_DEFINE(HAVE_PPCCPU)
fi


dnl *********************************************************************
dnl For x86 machines only check which code model we should use
dnl and whether the GCC tool chain can generate 3DNow assmebly instructions
dnl 

if test x$have_x86cpu = xtrue ; then
AC_MSG_CHECKING(x86 sub-architecture settings)

  if test "$enable_cmov_extension" != "no" ; then
    arch=`uname -m`
  else
    arch=i586
  fi 
  have_cmov=false
  case $arch in
  i786) ARCHFLAGS="-mcpu=i786 -march=$arch"
  have_cmov=true
  ;;
  i686) ARCHFLAGS="-mcpu=i686 -march=$arch"
  have_cmov=true
  ;;
  i586) ARCHFLAGS="-mcpu=i586 -march=$arch"
  have_cmov=false
  ;;
  *) 
  have_cmov=false
  ;;
  esac
AC_MSG_RESULT($ARCHFLAGS)

else
  have_cmov=false
fi

dnl **********************************************************************
dnl All the conditional stuff for the Makefiles
dnl
AM_CONDITIONAL(HAVE_ASM_MMX, test x$have_asm_mmx = xtrue)
AM_CONDITIONAL(HAVE_ASM_NASM, test x$have_asm_nasm = xtrue)
AM_CONDITIONAL(HAVE_X86CPU, test x$have_x86cpu = xtrue)
AM_CONDITIONAL(HAVE_PPCCPU, test x$have_ppccpu = xtrue)
AM_CONDITIONAL(BUILD_MJPEG, test x$have_sdl = xtrue)
AM_CONDITIONAL(HAVE_AVIFILE, test x$have_aviplay = xtrue)
AM_CONDITIONAL(HAVE_GTK, test x$have_gtk = xtrue)
AM_CONDITIONAL(HAVE_SDL, test x$have_sdl = xtrue)
AM_CONDITIONAL(HAVE_V4L, test x$have_video4linux = xtrue)
have_v4l_or_sdl=false
if test x$have_video4linux = xtrue; then
  have_v4l_or_sdl=true
else
  if test x$have_sdl = xtrue; then
    have_v4l_or_sdl=true
  fi
fi
AM_CONDITIONAL(HAVE_V4L_OR_SDL, test x$have_v4l_or_sdl = xtrue)

dnl *********************************************************************
dnl Check for what warnings we want gcc to use and adjust the CFLAGS
dnl as needed. This only works for GCC.
dnl We do this last as it can screw up library detection etc...
dnl 

CFLAGS="$ARCHFLAGS $CFLAGS"
if test "x${GCC}" != "xyes" ; then
  enable_compile_warnings=no
fi
AC_MSG_CHECKING(what warning flags to pass to the C compiler)
warnCFLAGS=
if test "x$enable_compile_warnings" != "xno" ; then
 if test "x$GCC" = "xyes" ; then
    case "$CFLAGS" in
     *-Wall*) ;;
     *) warnCFLAGS="-Wall -Wunused" ;;
    esac
  if test "x$enable_compile_warnings" = "xyes" ; then
    warnCFLAGS="$warnCFLAGS -Wmissing-prototypes -Wmissing-declarations -Wpointer-arith -Wcast-align -Wwrite-strings -Wcast-qual"
  fi
  if test "x$enable_warnings_as_errors" = "xyes" ; then
    warnCFLAGS="$warnCFLAGS -Werror"
  fi
 fi
fi
AC_MSG_RESULT($warnCFLAGS)
if test "x$cflags_set" != "xyes" ; then
  CFLAGS="$CFLAGS $warnCFLAGS"
  cflags_set=yes
fi

AC_ARG_ENABLE(assert,
 [  --disable-assert        Do not assert parameters to functions in libraries.],
 [ case "$enableval" in yes|no) : ;; *) AC_MSG_ERROR(bad value for --enable-assert)                ;; esac ],
 [ enable_assert=yes ])

if test x"$enable_assert"                 = x"no"; then NDEBUG=1;                fi

AC_DEFINE(MJPEGTOOLS)
case x"$NDEBUG"                in x"1") AC_DEFINE(NDEBUG)                ;; esac

dnl **********************************************************************
dnl Output a Makefile or two and the lib/header descriptor script
dnl
AC_OUTPUT([
Makefile
docs/Makefile
lavtools/Makefile
yuvdenoise/Makefile
yuvfilters/Makefile
mpeg2enc/Makefile
aenc/Makefile
mplex/Makefile
scripts/Makefile
utils/Makefile
mjpegtools-config
mjpegtools.pc
])

AC_DEFINE(VERSION, ${VERSION})

dnl ************************************************************************
dnl Summarize the config for the user.
dnl
echo ""
echo " MJPEG tools ${VERSION} build configuration :"
echo ""
echo "    - X86 Optimizations:"
echo "      - MMX/3DNow!/SSE enabled      : ${have_asm_mmx}"
echo "      - cmov support enabled        : ${have_cmov}"
if test "$have_cmov" = "true" ; then
echo "
****************************************************************************
* NOTE:                                                                    *
*   The resultant binaries will ***NOT*** run on a K6 or Pentium CPU       *
****************************************************************************"
fi
echo "    - video4linux recording/playback: ${have_video4linux}"
echo "    - software MJPEG playback       : ${have_sdl}"
echo "    - movtar playback/recording     : ${have_movtar}"
echo "    - Quicktime playback/recording  : ${have_quicktime}"
if test "$have_quicktime" = "true" ; then
echo "      - Quicktime source in         : ${with_quicktime}"
fi
echo "    - AVI MJPEG playback/recording  : true (always)"
echo "    - libDV (digital video) support : ${have_dv}"
echo "    - AVIFILE divx encoding support : ${have_aviplay}"
echo "    - Gtk+ support for glav         : ${have_gtk}"
echo "    - Support for large (>2GB) files: ${have_large_file}"
echo ""
