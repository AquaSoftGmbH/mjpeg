dnl Process this file with autoconf to produce a configure script.
AC_INIT(lavtools/lav_io.c)

MJPEG_MAJOR_VERSION=1
MJPEG_MINOR_VERSION=5
MJPEG_MICRO_VERSION=0
MJPEG_VERSION=$MJPEG_MAJOR_VERSION.$MJPEG_MINOR_VERSION.$MJPEG_MICRO_VERSION

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(mjpegtools, $MJPEG_VERSION)
AM_MAINTAINER_MODE
AC_CANONICAL_HOST

# libtool versioning
LT_RELEASE=$MJPEG_MAJOR_VERSION.$MJPEG_MINOR_VERSION
LT_CURRENT=$MJPEG_MICRO_VERSION
LT_REVISION=$MJPEG_MICRO_VERSION
LT_AGE=$MJPEG_MICRO_VERSION
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl Initialize libtool
AM_PROG_LIBTOOL

dnl **********************************************************************
dnl Options

AC_ARG_ENABLE(compile-warnings,     
  [  --enable-compile-warnings,        Turn on compiler warnings.])
AC_ARG_ENABLE(warnings_as_errors,   
  [  --enable-warnings_as_errors,      Compiler warnings are errors.])
AC_ARG_ENABLE(xfree-ext, 
  [  --enable-xfree-ext,               use XFree extensions (DGA)])
AC_ARG_ENABLE(cmov-extension, 
  [  --enable-cmov-extension,          use the cmov instruction.])
AC_ARG_ENABLE(mmx-accel,
  [  --enable-mmx-accel,               use the mmx accelerated functions])
AC_ARG_WITH(jpeg-mmx,
  [  --with-jpeg-mmx,                  use the mmx accelerated jpeg lib])
AC_ARG_WITH(quicktime,
  [  --with-quicktime,                 quicktime support for record/playback])
AC_ARG_WITH(dv,
  [  --with-dv,                        libDV (digital video) support])
AC_ARG_WITH(dv-yv12,
  [  --with-dv-yv12,                   libDV PAL YV12 read-support])
AC_ARG_WITH(large-file,
  [ --disable-large-file,              enable large file support in 32 bit systems])
AC_ARG_WITH(aviplay,
  [ --with-aviplay                     use aviplay libraries])

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
#AC_PROG_RANLIB
AC_C_BIGENDIAN
AC_C_CONST
AC_C_INLINE
AC_CHECK_HEADERS(fenv.h stdint.h inttypes.h stdbool.h alloca.h)


dnl Set up the usual compiler infos...
if test ! x$disable_large_file = xyes
then
AC_DEFINE(_FILE_OFFSET_BITS,64)
else
AC_DEFINE(_FILE_OFFSET_BITS,32)
fi

dnl *********************************************************************
dnl madmac/gernot: This activates architecture specific changes (e g no MMX)
dnl
dnl It defines a tag called "IRIX" to circumvent all the Linux video device code (and its includes)
dnl and defines WORD_BIGENDIAN to flag a big iron system ;-) 

case "$HOSTTYPE" in
  mips*) 
   echo NEW: Activating IRIX architecture flags:IRIX and WORD_BIGENDIAN !
   CFLAGS="$CFLAGS -DIRIX -DWORD_BIGENDIAN";;
esac

dnl *********************************************************************
dnl Check for the various libraries we depend on.
dnl
dnl First lets see if glib is present on this machine

AM_PATH_GLIB(1.2.0)

dnl *********************************************************************
dnl Check for the pthread lib
dnl
AC_SUBST(PTHREAD_LIBS)
have_pthread=false
AC_CHECK_LIB(pthread, pthread_create,
  [ PTHREAD_LIBS="-lpthread" 
    AC_DEFINE(HAVE_LIBPTHREAD)
    have_pthread=true ],,)

AC_CHECK_FUNC(pthread_attr_getstacksize,
	          [
				AC_DEFINE(HAVE_PTHREADSTACKSIZE)
			  ] )


dnl *********************************************************************
dnl Check for the special mmx accelerated jpeg library
dnl At the end of this mess, JPEG_LIBS will contain the libraries and 
dnl flags needed to link with the jpeg library and JPEG_CFLAGS will 
dnl have the needed flags to compile against said library
AC_SUBST(JPEG_LIBS)
AC_SUBST(JPEG_CFLAGS)
have_jpeg=false
if test x$with_jpeg_mmx = xyes ; then
  AC_MSG_ERROR([
*** A directory must be specified for --with-jpeg-mmx option.])
fi
if test x$with_jpeg_mmx = x ; then
  dnl Special case for building .deb's
  if test -d ../jpeg-mmx ; then
    with_jpeg_mmx=`pwd`/../jpeg-mmx
  else
    with_jpeg_mmx=/usr/local/src/jpeg-mmx
  fi
fi

dnl
dnl Look for the installed/specified copy
dnl

OLD_CFLAGS="$CFLAGS"
OLD_LIBS="$LIBS"
LIBS="$LIBS -L$with_jpeg_mmx"
CFLAGS="$CFLAGS -I$with_jpeg_mmx"
AC_CHECK_LIB(jpeg-mmx, jpeg_start_compress,
   [ JPEG_LIBS="$LIBS -ljpeg-mmx"
     JPEG_CFLAGS="-I$with_jpeg_mmx"
       have_jpeg=true ],,)
  LIBS="$OLD_LIBS"
  CFLAGS="$OLD_CFLAGS"

dnl 
dnl Look for _a_ jpeg lib that will work.
dnl
if test x$have_jpeg = xfalse ; then
  AC_CHECK_LIB(jpeg, jpeg_start_compress,
    [ JPEG_LIBS="-ljpeg"
      JPEG_CFLAGS=""
      have_jpeg=true ],,)
fi
dnl *********************************************************************
dnl Check for the libmovtar library
AC_SUBST(MOVTAR_CFLAGS)
AC_SUBST(MOVTAR_LIBS)
have_movtar=false
AM_PATH_MOVTAR(0.0.2, [ AC_DEFINE(HAVE_LIBMOVTAR) have_movtar=true],,)

dnl *********************************************************************
dnl Check for the quicktime for linux library
dnl At the end of this mess, QUICKTIME_LIBS will contain the libraries and
dnl flags needed to link with the quicktime library and QUICKTIME_CFLAGS
dnl will have the needed flags to compile against said library
AC_SUBST(QUICKTIME_LIBS)
AC_SUBST(QUICKTIME_CFLAGS)
if test x$with_quicktime = xyes ; then
  AC_MSG_ERROR([
*** A directory must be specified for the --with-quicktime option.])

else if test x$with_quicktime = x ; then
	if test -d /usr/local/src/quicktime4linux-1.3  ; then
	  with_quicktime=/usr/local/src/quicktime4linux-1.3
	else if test -d /usr/local/src/quicktime  ; then
	  with_quicktime=/usr/local/src/quicktime	
	else if test -d /usr/include/quicktime	; then
	  with_quicktime=/usr/include/quicktime
	fi	
	fi
	fi
fi
fi
have_quicktime=false
AC_CHECK_LIB(png, png_read_info, [QUICKTIME_LIBS="-lpng" PNG="found"])
if test "$PNG" = "found" ; then
  if test x$have_pthread = xtrue ; then
    EXTRA_LIBS=" $GLIB_LIBS  $PTHREAD_LIBS  -lpng -ldl"
  else
    EXTRA_LIBS="-L$with_quicktime $GLIB_LIBS -lpng -ldl"
  fi
  AC_CHECK_LIB(quicktime, quicktime_open,
    [ QUICKTIME_LIBS="-L$with_quicktime -lquicktime $EXTRA_LIBS"
	  QUICKTIME_CFLAGS="-I $with_quicktime"
      AC_DEFINE(HAVE_LIBQUICKTIME)
      have_quicktime=true],, 
      -L$with_quicktime $EXTRA_LIBS  $JPEG_LIBS )
  EXTRA_LIBS=""
else
  AC_MSG_WARN([
**** Quicktime record/playback disabled.])
fi

if test x$have_quicktime = xtrue ; then
  HAVE_QUICKTIME=1
else
  HAVE_QUICKTIME=0
fi
AC_SUBST(HAVE_QUICKTIME)
QUICKTIME_DIR=$with_quicktime
AC_SUBST(QUICKTIME_DIR)

dnl *********************************************************************
dnl Check for the aviplay for linux library
dnl At the end of this mess, AVIPLAY_LIBS will contain the libraries and
dnl flags needed to link with the aviplay library and AVIPLAY_CFLAGS
dnl will have the needed flags to compile against said library
AC_SUBST(AVIPLAY_LIBS)
AC_SUBST(AVIPLAY_CFLAGS)

have_aviplay=false
dnl check that there's an argument
if test x$with_aviplay = xyes ; then
  AC_MSG_ERROR([
  *** A directory must be specified for the --with-aviplay option.])
fi

dnl if the argument was not given, try finding it ourselves
if test x$with_aviplay = x ; then
  if test -d /usr/local/src/avifile  ; then
    with_aviplay=/usr/local/src/avifile 
    have_aviplay=true
  else if test -d /usr/local/include/avifile  ; then
         with_aviplay_i=/usr/local/include/avifile 
         with_aviplay_l=/usr/local/lib
         have_aviplay=true
       else if test -d /usr/include/avifile  ; then
              with_aviplay_i=/usr/include/avifile 
              with_aviplay_l=/usr/lib
              have_aviplay=true
            fi
       fi
  fi
else
  if test -d $with_aviplay ; then
    have_aviplay = true
  fi
fi

dnl add some more libs which are probably needed
if test x$have_pthread = xtrue ; then
  EXTRA_LIBS="$GLIB_LIBS  $PTHREAD_LIBS  -ldl"
else
  EXTRA_LIBS="-L$with_aviplay$with_aviplay_l $GLIB_LIBS -ldl"
fi

if test x$have_aviplay = xtrue ; then
  AVIPLAY_LIBS="-L$with_aviplay$with_aviplay_l -laviplay $EXTRA_LIBS"
  AVIPLAY_CFLAGS="-I$with_aviplay$with_aviplay_i"
fi

dnl *********************************************************************
dnl Check for the libdv
dnl At the end of this mess, DV_LIBS will contain the libraries and 
dnl flags needed to link with the jpeg library and DV_CFLAGS will 
dnl have the needed flags to compile against said library
AC_SUBST(DV_LIBS)
AC_SUBST(DV_CFLAGS)
if test x$with_dv = xyes ; then
  AC_MSG_ERROR([
*** A directory must be specified for the --with-dv option.])
else if test x$with_dv = x ; then
  with_dv_l=/usr/local/lib
  with_dv_i=/usr/local/include/libdv
fi
fi
have_dv=false
if test x$have_pthread = xtrue ; then
  EXTRA_LIBS=" $GLIB_LIBS  $PTHREAD_LIBS -ldl -lm"
else
  EXTRA_LIBS="-L$with_dv$with_dv_l $GLIB_LIBS -ldl -lm"
fi
AC_CHECK_LIB(dv, dv_init,
  [ DV_LIBS="-L$with_dv$with_dv_l -ldv ${EXTRA_LIBS}"
    DV_CFLAGS="-I$with_dv$with_dv_i"
    AC_DEFINE(SUPPORT_READ_DV2)
    AC_DEFINE(SUPPORT_READ_YUV420)
    have_dv=true],, 
    -L$with_dv$with_dv_l  ${EXTRA_LIBS})

dnl *********************************************************************
dnl Check for libDV YV12 read-support
if test x$with_dv_yv12 = xyes; then
if test x$have_pthread = xtrue ; then
  EXTRA_LIBS=" $GLIB_LIBS  $PTHREAD_LIBS -ldl -lm"
else
  EXTRA_LIBS="-L$with_dv$with_dv_l $GLIB_LIBS -ldl -lm"
fi
AC_CHECK_LIB(dv, dv_init,
  [ DV_LIBS="-L$with_dv$with_dv_l -ldv ${EXTRA_LIBS}"
    DV_CFLAGS="-I$with_dv$with_dv_i"
    AC_DEFINE(LIBDV_PAL_YV12)],,
    -L$with_dv$with_dv_l  ${EXTRA_LIBS})
fi

dnl *********************************************************************
dnl  Lets find where xwindows lives on this machine. Punt if not found.
AC_PATH_XTRA

if test "-DX_DISPLAY_MISSING" = "$X_CFLAGS"; then
AC_MSG_ERROR(can not find X11)                                                
fi

AC_SUBST(X_CFLAGS)                                                             
AC_SUBST(X_PRE_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_LIBS)
AC_SUBST(x_libraries)                                                           

dnl ********************************************************************
dnl Check for DGA (for v4l-conf)
dnl ********************************************************************
AC_SUBST(V4LCONF_LIBS)
AC_CHECK_LIB(Xxf86dga, XF86DGAQueryExtension,
	V4LCONF_LIBS="$X_LIBS -lXxf86dga" AC_DEFINE(HAVE_LIBXXF86DGA),,
	$X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS)
dnl ********************************************************************
dnl Check for Gtk+/glib (for glav)
dnl ********************************************************************
AM_PATH_GTK(1.2.0,have_gtk=true,have_gtk=false)

dnl ********************************************************************
dnl Check for the SDL library (for software playback)
dnl
dnl AM_PATH_SDL defines SDL_CFLAGS and SDL_LIBS for us..
have_sdl=false
if test x$have_jpeg = xtrue ; then
 AM_PATH_SDL(1.1.3, [ AC_DEFINE(BUILD_MJPEG) have_sdl=true],,)
fi

dnl ********************************************************************
dnl Test for MMX support, if we find an IA32 platform then check to see
dnl if gcc and its tools can generate MMX instructions, also make sure
dnl nasm is present for the files that need that. 
dnl Both are checked for for the maximum flexablity.
dnl
dnl TODO: host = non intel, target = intel <blah> do the checks also?
dnl       remeber we are checking that the toolchain can generate the
dnl       code, not whether the host can execute the code, thats done
dnl       at run time with the exception of the SSE code.
dnl
dnl 
have_asm_mmx=false
have_asm_sse=false
have_asm_3dnow=false
have_asm_nasm=false
have_x86cpu=false
AC_MSG_CHECKING([for Intel Pentium architecture (IA32)])
if test "$host_cpu" = "i386" -o "$host_cpu" = "i486" \
   -o "$host_cpu" = "i586" -o "$host_cpu" = "i686" \
   -o "$host_cpu" = "i786" ; then
  AC_MSG_RESULT(yes)
  have_x86cpu=true
fi
if test "$enable_mmx_accel" != "no"; then
 if test x$have_x86cpu = xtrue ; then
   AC_DEFINE(HAVE_X86CPU)
   AC_MSG_CHECKING([for support for gcc-style register parameters on Intel])
   AC_TRY_COMPILE([],
    [extern void x(
     const unsigned char *src1,
     const unsigned char *src2,
     unsigned count,
     unsigned char *dst) __attribute((regparm(3)));],
   [AC_MSG_RESULT(yes)
    AC_MSG_CHECKING([for support of MMX in assembly code])
    cat > conftest.S <<EOF
       .text

       psubusb %mm3, %mm4
EOF
    if $CC -c conftest.S ; then
      AC_MSG_RESULT(yes)
      rm -f conftest.*
      AC_DEFINE(HAVE_ASM_MMX)
      have_asm_mmx=true
    else
     AC_MSG_RESULT(no)
     echo "configure: failed program was:" >&AC_FD_CC
     cat conftest.S >&AC_FD_CC
     rm -f conftest.*;
    fi
    AC_PATH_PROG(NASM, nasm)
    if test x$NASM = x -o x$NASM = x'"$NASM"'; then
      : # no nasm in the path
    else
     AC_DEFINE(HAVE_ASM_NASM)
     NASMFLAGS="-f elf"
     AC_SUBST(NASMFLAGS)
    fi
  ],
  [AC_MSG_RESULT(no)
   AC_MSG_WARN(*** MMX Optimizations disabled....)]);
 else
   AC_MSG_RESULT(no) ;
 fi
fi

dnl ************************************************************************
dnl Check that the GCC tool chain can generate 3DNow assmebly instructions
dnl
AC_MSG_CHECKING([for support of 3DNow in assembly code])
if test "$enable_3dnow_accel" != "no" ; then
  cat > conftest.S <<EOF
    .text

    pfmul %mm3, %mm4
EOF
 if $CC -c conftest.S ; then
   rm -f conftest.*
   AC_DEFINE(HAVE_ASM_3DNOW)
   have_asm_3dnow=true
 else
   echo "configure: failed program was:" >&AC_FD_CC
   cat conftest.S >&AC_FD_CC
   rm -f conftest.*
 fi
fi
if test x$have_asm_3dnow = xtrue ; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl ********************************************************************* 
dnl This test only works on Linux machines with /proc filesystem support
dnl enabled. We have to check this independantly as cmov is independant
dnl of MMX and 3DNow stuff.
dnl
have_cmov=false
if test x$have_x86cpu = xtrue ; then
 AC_MSG_CHECKING(for CMOV support)
 if test "$enable_cmov_extension" != "no" ; then

  cpu_family=`grep "cpu family" /proc/cpuinfo | awk 'BEGIN { FS = ":"; } { printf "%d", $2 + 0;}'`
  if test "$cpu_family" -gt 5 ; then
    have_cmov=true
    AC_DEFINE(HAVE_CMOV)
  fi
 fi
 AC_MSG_RESULT($have_cmov);
fi

dnl *********************************************************************
dnl For x86 machines only check which code model we should use
dnl 
if test x$have_x86cpu = xtrue ; then
AC_MSG_CHECKING(x86 sub-architecture settings)

  if test "$enable_cmov_extension" != "no" ; then
    arch=`uname --machine`
  else
    arch=i586
  fi
  case `uname --machine` in
  i786) ARCHFLAGS="-mcpu=i786 -march=$arch"
  ;;
  i686) ARCHFLAGS="-mcpu=i686 -march=$arch"
  ;;
  i586) ARCHFLAGS="-mcpu=i586 -march=$arch"
  ;;
  *) 
  ;;
  esac
AC_MSG_RESULT($ARCHFLAGS)
fi

dnl **********************************************************************
dnl All the conditional stuff for the Makefiles
dnl
AM_CONDITIONAL(HAVE_ASM_MMX, test x$have_asm_mmx = xtrue)
AM_CONDITIONAL(HAVE_ASM_3DNOW, test x$have_asm_3dnow = xtrue)
AM_CONDITIONAL(HAVE_ASM_NASM, test x$have_asm_nasm = xtrue)
AM_CONDITIONAL(HAVE_X86CPU, test x$have_x86cpu = xtrue)
AM_CONDITIONAL(BUILD_MJPEG, test x$have_sdl = xtrue)
AM_CONDITIONAL(HAVE_AVIFILE, test x$have_aviplay = xtrue)
AM_CONDITIONAL(HAVE_GTK, test x$have_gtk = xtrue)

dnl *********************************************************************
dnl Check for what warnings we want gcc to use and adjust the CFLAGS
dnl as needed. This only works for GCC.
dnl We do this last as it can screw up library detection etc...
dnl 

CFLAGS="$ARCHFLAGS $CFLAGS"
if test "x${GCC}" != "xyes" ; then
  enable_compile_warnings=no
fi
AC_MSG_CHECKING(what warning flags to pass to the C compiler)
warnCFLAGS=
if test "x$enable_compile_warnings" != "xno" ; then
 if test "x$GCC" = "xyes" ; then
    case "$CFLAGS" in
     *-Wall*) ;;
     *) warnCFLAGS="-Wall -Wunused" ;;
    esac
  if test "x$enable_compile_warnings" = "xyes" ; then
    warnCFLAGS="$warnCFLAGS -Wmissing-prototypes -Wmissing-declarations"
  fi
  if test "x$enable_warnings_as_errors" = "xyes" ; then
    warnCFLAGS="$warnCFLAGS -Werror"
  fi
 fi
fi
AC_MSG_RESULT($warnCFLAGS)
if test "x$cflags_set" != "xyes" ; then
  CFLAGS="$CFLAGS $warnCFLAGS"
  cflags_set=yes
fi


dnl **********************************************************************
dnl Output a Makefile or two
dnl
AC_OUTPUT([
Makefile
docs/Makefile
lavtools/Makefile
yuvdenoise/Makefile
yuvfilters/Makefile
mjpeg/Makefile
mpeg2enc/Makefile
aenc/Makefile
mplex/Makefile
scripts/Makefile
utils/Makefile])

AC_DEFINE(VERSION, ${VERSION})

dnl ************************************************************************
dnl Summarize the config for the user.
dnl
echo ""
echo " MJPEG tools ${VERSION} build configuration :"
echo ""
echo "    - MMX Optimizations enabled     : ${have_asm_mmx}"
echo "    - cmov support enabled          : ${have_cmov}"
if test "$have_cmov" = "true" ; then
echo "
****************************************************************************
* NOTE:                                                                    *
*   The resultant binaries will ***NOT*** run on a K6 or Pentium CPU       *
****************************************************************************"
fi
echo ""
echo "    - 3DNow support                : ${have_asm_3dnow}"
echo "    - software MJPEG playback      : ${have_sdl}"
echo "    - movtar playback/recording    : ${have_movtar}"
echo "    - Quicktime playback/recording : ${have_quicktime}"
echo "    - AVI MJPEG playback/recording : true (always)"
echo "    - libDV (digital video) support: ${have_dv}"
echo "    - AVIFILE divx encoding support: ${have_aviplay}"
echo "    - Gtk+ support for glav        : ${have_gtk}"
echo ""
