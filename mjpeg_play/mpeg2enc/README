mpeg2enc encodes MJPEG AVIs, Quicktime Files or Edit List Files
to MPEG-1/2 video streams.

DISCLAIMER:

This software is from the MPEG Software Simulation Group.
See notices in source code regarding Patents and miscellaneous
IP issues.

POST  MPEG SSG Development

Rainer Johanni changed the input routine so that "lavtools" Edit
Lists, AVI's and Quicktime input is accepted, introduced command line
params instead of a param file and made some simple optimizations.
Rainer also did the initial mod to accept the new special yuv format.

Andrew Stevens added more intelligent motion compensation and
optimised some key calculations that run badly on modern highly
pipelined machines.  These were then further refined based on the
results of some work by Juan Remero Arroyo (who would have guessed 4*4
blocks still produce useful results!).
 
Chris Atenasio's contributed MMX2/SSE code for the motion compensation
macroblock group difference calculation.  

Andrew Stevens added a lot more MMX1 code for motion compensation and
adapted Chris' code for his intelligent motion compensation mods and
ported the fdct/idct MMX code to nasm.

Andrew Stevens added some simple pre-processing filters to improve
output quality when using noisy (e.g. broadcast) source video.

Andrew Stevens modified the bit-allocation routines to use a 
more accurate method of estimating bits needed for good quality results.

Andrew Stevens fixed a number of overflow and calculation errors
associated with large files.

Andrew Stevens ported in and tidied up a number of
MMX routines from the bbmpeg project for windows (see
www.delphi.com/bbmpeg_ug) to accelerate a few "second line" but
nonetheless significantly time-consuming functions.

Andrew Stevens added a new much faster MMX / 3Dnow / ISSE 
based quantization routines.

Andrew Stevens replaced the use of SAD with variance for selecting
field-based motion compensation. Slightly more expensive but produces
*markedly* better results.  

In case you're wondering: the upshot of this disclaimer is that the
functionality is exactly as per the original but the software now runs
around 12 times as fast with sensible (search radius 15) motion compensation
settings, and you can now get half-decent looking results when working with
typical broadcast quality sources.

USAGE:

Output file name (-o option) is required!

Usage: ./mpeg2enc [params]
   where possible params are:
   -m num     MPEG level (1 or 2) default: 1
   -b num     Bitrate in KBit/sec (default: 1152 KBit/s)
   -q num     Quality ceiling [1..16] (1 is best, no default)
			  This activates *variable bitrate encoding*. See below!
   -o name    Outputfile name (REQUIRED!!!)
   -F num     only for MPEG 2 output:
               0 = progressive output (no field pictures)
               1 = field pictures, bottom field first
               2 = field pictures, top field first
   -r num     Search radius [0..32] (default 0: don't search at all)
   -4 num     (default: 2)
			  Threshold  to divide 4*4 sub-sampled motion search by.
				1 will guarantee practically no match likely to lead to
			 and optimum will be discarded but is slow.  4 is fast but
			will cause the odd match to be missed.
   -2 num     (default: 2)
				Same as -4 but for the 2*2 sub-sampled stage of motion
			 compensation search.
   -Q num     Amount quantisation of highly active blocks is 
			  reduced by [0.1 .. 10.0] [2.0]
(default: 2.5)   -v num     Target video buffer size in KB (default 46)
   -t         Activate dynamic thresholding of motion compensation window size
   -N         Noise filter via quantisation adjustment (experimental)
   -h         Maximise high-frequency resolution (useful for high 
			  quality sources)
   -o         Use old style lag rate control (not recommended, probably buggy) 

FAST MOTION COMPENSATION:

For MPEG to achieve good quality results it has to find a good match
between each 8*8 "macro-block" of pixels in the current frame and
an 8*8 region in a preceding or following frame.  The better the match
the less information it has to drop when compressing.  Obviously, finding
such a good match in *moving* pictures requires a lot of searching.

To do this (reasonably) quickly we use a trick: we first search
coarsely first comparing sums of 4*4 pixel groups and then 2*2 pixel
groups rather than individual pixels. Technically: we do an initial
search using sub-sampled data and use this to choose the places to
search for detail single pixel and sub-pixel matches.
This reduces the amount of search *dramatically*.  


Since a good exact matches (down to half-pixels) will also give a good
2*2 match we know the best match should be in amoungst the best 2*2
matches. Similarly for the 2*2 in the 4*4 matches.  However, there may
be some false positives.  So we can't just work with the very best 4*4
and the best 2*2 near that.  Instead we discard those above some
threshold these good 2*2 matches.  Experiments and a bit of simple
statistics revealed that it was exceedingly rare to miss the best
match doing this, and even when we did miss the match found was
*almost* as good.  You can adjust the threshold with the -4 and -2
flags.

Between the settings

-4 1 -2 1  (highest quality)

-4 4 -2 4	(fastest)

Quality is impacted by about 10% quantisation (typically around 0.2 of
a bit precision in texture coefficients).  Speed is impacted by a
factor of 2.  For most purposes the default settings will be fine.
However, even in the fastest mode all but sequences on the verge of
what is possible should encode fine.

Anyway, motion compensation is now fast enough on modern CPU's that it
is only a fraction of total run-time even with big search radii set.
There's very little point going below a radius of 16 as the speed gains
are pretty limited.

Obviously, your mileage may vary so you may want to fiddle with the
setting if you're getting rotten results.  Contact
Andrew.Stevens@comlab.ox.ac.uk if you think you have found a case
where the fast compensation fails!

In case you're wondering: the performance gain over brute force search
is something like a factor of 5.

NOISE FILTERING and BIT DROPPING

MPEG compression assumes that the pictures in a video sequence are
closely correlated (once you've applied motion compensatino to search
for good matches).  Unfortunately, if you have a noisy original video
source this assumption isn't really true.  The noise introduces lots
of spurious differences betwen actually very similar pictures.  The
end result is ugly "artifacted" results where MPEG has dropped real
information in favour of spurious noise.  The solution is to try to
filter the noise out of the source.  kav2yuv allows this.  Currently,
nothing terribly clever is done: just simple smoothing. -n 1 smooths
gently and is almost imperceptible, -n 2 is rather stronger and is
noticeable if you compare source video.  -n3 is really brutal and
probably only sensible for material captured at high
resolution. However, if you really have noisy sources then -n 2 or -n
3 is infinitely preferable to the swimming sea of artefacts MPEG
otherwise generates.

SMARTER BIT ALLOCATION (A.Stevens Aug and Nov 2000)

The original source code makes heavy use of the variance of
blocks as a measure of their information content.  This is actually
pretty poor as what really counts is how many bits it will take
to encoded the quantised DCT of the block without excessive losses.
The bit allocation strategy is also very naive, essentially the
encoder (more or less) tries to keep the bits allocated to each
block the same.   This is bad news if you have a picture where
a lot of the information content comes low down....

As a first step to better quality encoding the current source now
uses the sum of absolute block coefficients as a measure of information
content. Bits are then allocated on the basis of how much information
is being covered so that bits are held back if high information
material comes late in the frame.  As a second step some attempt is made to
guess the "right" level of quantisation for a frame in advance so that
the (inevitably lagging) feedback control of bit-allocation only deals with
minor fine-tuning.  This prevents annoying "oscillation" of bit-allocation".

These modifications appear to give noticeable better results, greatly
reducing fringes around sharp contrasts (e.g. titles) whilst still
ensuring no significant bit-rate overshoots.

The encoder now also tries to predict the likely bit-demand for each
frame so it can set quantisation roughly right so that there isn't a
"ramping" of quality down a frame with the top (too) good and the bottom
(excessively) poor.


VARIABLE BIT RATE ENCODING

The encoder now supports a form of variable bit-rate encoding.  You
can specify a quality ceiling (for the technical: a quantisation
floor).  In this case the bitrate is interpeted as a "do not exceed
ceiling".  The encoder bumps quality up as high as it can without
exceeding this rate and the specified quality ceiling.  For this
option to be usefully use the speed ceiling should be high enough that
it is rarely if ever reached and a large video buffer size (say 250 or
400K specified).  Sensible numbers for quality ceiling are between 4
and 8.  Below 4 and quality gains are probably no longer visible.
Above 8 and artefacting may occur.  An interesting effect of setting a
fixed quality rate is that encoding is actually marginally more
efficient as the encoder encodes *changes* in quality setting from
screen block to block.. If they don't change they don't use any bits!

PERFORMANCE: MMX/MMXEXT/SSE/3D-NOW (A.Stevens Jul/Aug 2000)

In addition to improved fast motion compensation the updated code also
has x86 assembly language routines for key calculations: 4*4. 8*8 and
16*16 block absolute difference sums, interpolated and simple
prediction variances, prediction addition and subtraction, foward and
inverse discrete cosine transforms, and quantisation and inverse
quantisation.

Unfortunately, the original MMX (MMX1) instruction set on the Pentium
MMX is somewhat deficient in a couple of key areas (it has obvious
"gaps").  Subsequent CPU's all started to fill these gaps in.  Thus
there is core MMX plus MMX extensions from one or all of: K6,
Athlon/Duron, P-III and now even P-IV.  Where relevant routines come
in several versions to make the most of what is available. As an
extra-special bonus for AMD owners some of the quantisation
calculations are done (much faster) with the 3D-Now! instructions.
Similar stuff for P-III/P-IV SSE instructions is being written.


There have also been some gross-me-out hacky optimisations made
to the non-MMX code to make it run better on modern pipelined CPU's.
However, if you're trying to compress long MPEG sequences on a pre-MMX
x86 CPU you *will* need some serious patience ;-).  I reckon compressing
a 1 hour TV show is now tolerable with the new super-duper fast
mpeg2enc and a  300Mhz+  CPU on the job.  Personally, I split the
work between 4 CPU's: Celeron 366, 2*PIII-450 and a K6-2 500.

Anyway to give you some idea what to expect here are some peformance
figures.  They're for the normal default settings and -4 1 -2 1 which 
tries to squeeze the last few drops of quality out.

Duron-700	  : 19fps / 13fps 
PIII-450 (katmai) :  11    / 6fps
PII-400		  :   8fps  /  4fps
Celeron-366       : 7fps / 3fps

It is interesting to note the how much less efficient the Intel CPU's are at 
the motion compensation searches controlled by the -4 and -2 flags.  I can 
only assume an Athlon would absolutely *fly* at this workload.

STILL MORE PERFORMANCE?

Not easy to see how big improvements can be made without radical
rebuilding of the code.  The program now spends around 50% of its
time in routines that are already aggressively implement in MMX (etc).

BETTER QUALITY?

- There is still a lot of room for improvements to bit-allocation.
The most interesting issue would be to detect scene changes and adjust
GOP's accordingly.   I-frames are *big*...

- It should also be possible to intelligently use switching of
quantisation matrices to suppress mosaicing in very active scenes. I.e.
to "blur" rather than "mosaic".

- Some minor gains could be made by intelligently selecting f-code's

- There are easy gains to be made (for people intending to use
software decoders or suitable hardware) by gettting veriable-bit-rate
encoding working once again.  This is one of the next things on the
list and should be pretty easy.

INPUT FORMAT

YUV4MPEG\n
<horizonal size> <vertical size> <frame_rate_code>\n
[FRAME\n<Y-data><U-data><V-data> ...]





