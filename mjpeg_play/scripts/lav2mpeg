#!/bin/bash

#
# A convenient front-end for the various mpeg encoding tools.
# Allows "1 command" production of a video stream...
# 

function usage ()
{
  echo "Usage: avi2mpeg [-s num] [-d num] [-n num] [-S] [-Q] [-M] [-V] [-t] [-c] [-o dstdir] srcfile ..."
  echo "s - factor source image to be scaled by for compression"
  echo "Q - High quality MPEG1 mode (1800Kbps video)"
  echo "M - Medium high quality MPEG1 mode (1450Kbps video)"
  echo "S - SVCD mode - generates SVCD compiliant stream"
  echo "V - VCD mode - generates VCD2.0 compilant stream"
  echo "VCD and SVCD images can be burnt to CD using vcdimager"
exit 1
}

function tidy_exit ()
{
	rm -f $tidyfile
	exit 0
}

scale=0
kind=avi
stereo=1
quality=""
search=16
noise=""
bitdrop=""
test="0"
hires=""
MPEGENC=mpeg2enc
MPLEX=mplex
dst=""
conc="0"
mplexflags=""
mpv="m1v"

while getopts ":s:q:n:d:o:MQSVTLRNtc" opt
do
case $opt in
s) scale=$OPTARG
  echo Setting scaling option to $OPTARG
;;
q) quality=$OPTARG
  echo Setting quality factor to $quality
;;
M) quality="-b 1450"
  mplexflags="-b 70"
  echo "Setting medium-quality MPEG1 (1550Kbps) mode"
;;
Q) quality="-b 1700"
  mplexflags="-b 80"
  echo "Setting high-quality MPEG1 (1800Kbps) mode"
;;
V) 
  echo VCD mode: generate VCD2.0 compliant output.
  quality=" -s"
  mplexflags="-f 1"
;;
S)
  echo SVCD mode: generate SVCD compliant output.
  quality="-m 2 -F 3 -q 10 -b 2550 -v 230 -s"
  mplexflags="-f 3"
  mpv="m2v"
  scale="2"
;;

L) echo "Using local encoder"
MPEGENC="./mpeg2enc"
MPLEX="mplex.test"
;;

T) echo "Using test encoder and multiplexer"
MPEGENC="mpeg2enc.test"
MPLEX="mplex.test"
test=""
;;
R) echo "Using reference encoder"
MPEGENC="mpeg2enc.ref"
;;
t) echo "Activating hi-res quantisation matrix"
hires="-h"
;;
n) echo "Setting noise filter $OPTARG"
noise="-n $OPTARG"
;;
d) echo "Setting bit-drop to $OPTARG"
bitdrop="-d $OPTARG"
;;
o) echo "Setting destination directory to $OPTARG"
dst=$OPTARG
;;
c) echo "Concurrent mode - > 1 avi2mpeg's can run on a file set without repeated work"
conc=1
;;
?)
	usage
;;
esac
done


if [ $stereo = 1 ]
then
   aencbpr=224
else
  aencbpr=112
fi

shift $[$OPTIND-1]

if [ x$1 = x ]
then
	usage
fi

trap tidy_exit SIGINT
trap tidy_exit SIGHUP

echo -n "Encoding commences "
date


for f in $*
do
  fname=${f%.*}
  kind=${f##${fname}.}
  if [ ! x${dst} = "x" ]
  then
    fname=${f##*/}
    r=${dst}/${fname%%.${kind}}
  else
    r=${fname}
  fi
  mpgfile=${r}.%d.mpg
  if [ ! ${conc} = 1 -o ! -f ${r}.${mpv} ]
  then
    if [ ${conc} = 1 ]
    then
      tidyfile=${r}.${mpv}
    fi
# If you have "buffer" and an SMP machine use the commented out version...
#    lav2yuv -s ${scale} ${noise} $f | buffer -b 4M | ${MPEGENC}  ${quality}    ${hires} -r ${search}  -o ${r}.${mpv}
    lav2yuv -s ${scale} ${noise} $f |  ${MPEGENC}  ${quality}   ${hires} -r ${search}  -o ${r}.${mpv}
    if [ ! $? = 0 ]
    then
       exit $?
    fi

    if [ ! ${conc} = 1 -o ! -f ${r}.mp2 ]
    then
      if [ $conc = 1 ]
      then
        tidyfile=${r}.mp2
      fi
		# Don't mux / aenc two at once - screws up NFS...
		while [ -r ${r%%.*}.mux ]
		do
		  sleep 30
		done
		# You probably want to replace this with toolame
		# See "transcode" for suitable flags
	  if [ $test = 0 ]
	  then
      lav2wav $f | nice -n 15 mp2enc -v -o ${r}.mp2
	  fi
    fi
	# Don't mux / aenc two at once - screws up NFS...
	while [ -r ${r%%.*}.mux ]
	do
	sleep 30
    done
	echo  > ${r%%.*}.mux
     nice -n 15 ${MPLEX} -q ${mplexflags} ${r}.${mpv} ${r}.mp2 ${mpgfile} 
     rm -f ${r%%.*}.mux
# Uncomment this if you want the raw files deleted
#	 rm -f  ${r}.${mpv} ${r}.mp2
  fi
done

